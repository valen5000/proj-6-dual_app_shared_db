---
- name: Deploy PostgreSQL with cross-platform support
  hosts: g1
  become: yes

  tasks:
    # Install PostgreSQL
    - name: Install PostgreSQL (Ubuntu)
      apt:
        name: 
          - "postgresql"
          - "postgresql-contrib"
          - "libpq-dev"
          - "python3-psycopg2"
        state: present
        update_cache: yes
      when: ansible_distribution == 'Ubuntu'

    - name: Install PostgreSQL (Fedora)
      ansible.builtin.dnf:
        name:
          - "postgresql-server"
          - "postgresql-contrib"
          - "python3-psycopg2"
        state: present
      when: ansible_distribution == 'Fedora'

    - name: Install PostgreSQL (Amazon Linux)
      yum:
        name:
          - "postgresql15-server"
          - "postgresql15-contrib"
          - "python3-psycopg2"
        state: present
      when: ansible_distribution == 'Amazon'

    # Initialize DB
    - name: Check if PostgreSQL data directory exists (Non-Ubuntu)
      stat:
        path: /var/lib/pgsql/data
      register: pg_data_dir
      when: ansible_distribution != 'Ubuntu'

    - name: Initialize PostgreSQL DB (Non-Ubuntu)
      command: "/usr/bin/postgresql-setup --initdb"
      when: 
        - ansible_distribution != 'Ubuntu'
        - not pg_data_dir.stat.exists
      notify: restart postgresql

    # Configure service
    - name: Ensure PostgreSQL is running and enabled
      service:
        name: postgresql
        state: started
        enabled: yes

    # Configure authentication - First allow passwordless local connections
    - name: Get PostgreSQL config path
      shell: |
        {% if ansible_distribution == 'Ubuntu' %}
        ls /etc/postgresql | head -n 1
        {% else %}
        echo "/var/lib/pgsql/data"
        {% endif %}
      register: pg_config
      changed_when: false

    - name: Configure local passwordless access
      lineinfile:
        path: "{{ '/etc/postgresql/' + pg_config.stdout + '/main/pg_hba.conf' if ansible_distribution == 'Ubuntu' else pg_config.stdout + '/pg_hba.conf' }}"
        insertafter: EOF
        line: "local   all             postgres                                trust"
      notify: restart postgresql

    - name: Flush handlers to apply auth changes
      meta: flush_handlers

    # Now set the postgres password
    - name: Set postgres admin password
      postgresql_user:
        name: "postgres"
        password: "chinelo"
        role_attr_flags: "SUPERUSER"
        login_user: "postgres"
        login_host: "localhost"

    # Reconfigure authentication for secure access
    - name: Configure secure authentication
      lineinfile:
        path: "{{ '/etc/postgresql/' + pg_config.stdout + '/main/pg_hba.conf' if ansible_distribution == 'Ubuntu' else pg_config.stdout + '/pg_hba.conf' }}"
        regexp: "^local\\s+all\\s+postgres\\s+trust"
        line: "local   all             postgres                                md5"
      notify: restart postgresql

    - name: Allow application connections
      lineinfile:
        path: "{{ '/etc/postgresql/' + pg_config.stdout + '/main/pg_hba.conf' if ansible_distribution == 'Ubuntu' else pg_config.stdout + '/pg_hba.conf' }}"
        line: "host    all             chinelo             127.0.0.1/32            md5"
      notify: restart postgresql

    # Create application user and database
    - name: Create application user
      postgresql_user:
        name: "chinelo"
        password: "chinelo"
        role_attr_flags: "CREATEDB,LOGIN"
        state: present

    - name: Create database
      postgresql_db:
        name: "chinelo"
        owner: "chinelo"
        state: present

  handlers:
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted
...        